{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inference in the full model\n",
    "\n",
    "This is the same example as considered in [Liu et al.](https://arxiv.org/abs/1801.09037) though we\n",
    "do not consider the special analysis in that paper. We let the computer\n",
    "guide us in correcting for selection.\n",
    "\n",
    "The functions `full_model_inference` and `pivot_plot` below are just simulation utilities\n",
    "used to simulate results in least squares regression. The underlying functionality\n",
    "is contained in the function `selectinf.learning.core.infer_full_target`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n",
      "Using TensorFlow backend.\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:455: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:456: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:457: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:458: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:459: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/Users/jonathantaylor/anaconda/envs/py36/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:462: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "R[write to console]: Loaded gbm 2.1.5\n",
      "\n",
      "R[write to console]: randomForest 4.6-14\n",
      "\n",
      "R[write to console]: Type rfNews() to see new features/changes/bug fixes.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import functools\n",
    "\n",
    "import numpy as np, pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import regreg.api as rr\n",
    "\n",
    "from selectinf.tests.instance import gaussian_instance # to generate the data\n",
    "from selectinf.learning.core import normal_sampler     # our representation of the (limiting) Gaussian data\n",
    "\n",
    "from selectinf.learning.utils import full_model_inference, pivot_plot\n",
    "from selectinf.learning.Rfitters import logit_fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will know generate some data from an OLS regression model and fit the LASSO\n",
    "with a fixed value of $\\lambda$. In the simulation world, we know the\n",
    "true parameters, hence we can then return\n",
    "pivots for each variable selected by the LASSO. These pivots should look\n",
    "(marginally) like a draw from `np.random.sample`. This is the plot below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0) # for replicability\n",
    "\n",
    "def simulate(n=100, \n",
    "             p=20, \n",
    "             s=5, \n",
    "             signal=(0.5, 1), \n",
    "             sigma=2, \n",
    "             alpha=0.1, \n",
    "             B=4000,\n",
    "             verbose=False):\n",
    "\n",
    "    # description of statistical problem\n",
    "\n",
    "    X, y, truth = gaussian_instance(n=n,\n",
    "                                    p=p, \n",
    "                                    s=s,\n",
    "                                    equicorrelated=False,\n",
    "                                    rho=0.5, \n",
    "                                    sigma=sigma,\n",
    "                                    signal=signal,\n",
    "                                    random_signs=True,\n",
    "                                    scale=False)[:3]\n",
    "\n",
    "    dispersion = sigma**2\n",
    "\n",
    "    S = X.T.dot(y)\n",
    "    covS = dispersion * X.T.dot(X)\n",
    "    \n",
    "    # this declares our target as linear in S where S has a given covariance\n",
    "    sampler = normal_sampler(S, covS) \n",
    "\n",
    "    def base_algorithm(XTX, lam, sampler):\n",
    "\n",
    "        p = XTX.shape[0]\n",
    "        success = np.zeros(p)\n",
    "\n",
    "        loss = rr.quadratic_loss((p,), Q=XTX)\n",
    "        pen = rr.l1norm(p, lagrange=lam)\n",
    "\n",
    "        scale = 0.\n",
    "        noisy_S = sampler(scale=scale)\n",
    "        loss.quadratic = rr.identity_quadratic(0, 0, -noisy_S, 0)\n",
    "        problem = rr.simple_problem(loss, pen)\n",
    "        soln = problem.solve(max_its=50, tol=1.e-6)\n",
    "        success += soln != 0\n",
    "        \n",
    "        return set(np.nonzero(success)[0])\n",
    "\n",
    "    XTX = X.T.dot(X)\n",
    "    XTXi = np.linalg.inv(XTX)\n",
    "    resid = y - X.dot(XTXi.dot(X.T.dot(y)))\n",
    "    dispersion = np.linalg.norm(resid)**2 / (n-p)\n",
    "                         \n",
    "    lam = 3.5 * np.sqrt(n)\n",
    "    selection_algorithm = functools.partial(base_algorithm, XTX, lam)\n",
    "    if verbose:\n",
    "        print(selection_algorithm(sampler))\n",
    "    # run selection algorithm\n",
    "\n",
    "    return full_model_inference(X,\n",
    "                                y,\n",
    "                                truth,\n",
    "                                selection_algorithm,\n",
    "                                sampler,\n",
    "                                success_params=(1, 1),\n",
    "                                B=B,\n",
    "                                fit_probability=logit_fit,\n",
    "                                fit_args={'df':20})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a look at what we get as a return value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{18, 13, 14}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['B', 'alpha', 'coverage', 'id', 'length', 'lower', 'nfeature',\n",
       "       'nsample', 'pivot', 'pvalue', 'target', 'upper', 'variable',\n",
       "       'bonferroni_coverage', 'bonferroni_length', 'bonferroni_lower',\n",
       "       'bonferroni_pvalue', 'bonferroni_upper', 'naive_coverage',\n",
       "       'naive_length', 'naive_lower', 'naive_pivot', 'naive_pvalue',\n",
       "       'naive_upper'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "while True:\n",
    "    df = simulate(verbose=True)\n",
    "    if df is not None:\n",
    "        break\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jonathantaylor/git-repos/selectinf/selectinf/distributions/discrete_family.py:86: RuntimeWarning: divide by zero encountered in log\n",
      "  self._lw = np.array([np.log(v) for v in xw[:,1]])\n"
     ]
    }
   ],
   "source": [
    "dfs = []\n",
    "for i in range(30):\n",
    "    df = simulate()\n",
    "    if df is not None:\n",
    "        dfs.append(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nJxJkJ510krewOuqoo1i4cCEnnniiz23ddj6qRB/G6tSpw8knn8wTTzxRpf0kJiby97//PaAr14kE\n3Jo1pduaNIH4+NDHIlEnPj6e8ePHc+ONN7Jw4UJat25d5raq6CVgjDE8+OCDTJ06le+++87nNhs3\nbqR///60aNGCpKQkWrVqxUMPPcTBQ4aElrx0369fP84888xS+xo1ahTJycne/qnCwkKefvppjjvu\nOBITE2nVqhVjxowJwm8qgvs+PSXqJCYm8vrrr3PccccddjtV9BJQvXv3pmXLlmVW9Vu3bqVOnTo8\n99xzzJ49m3vvvZe3336b2267rcx9Xn755Xz11Vf8/vvvxdonTJhAZmYmNYrWWbztttt4/PHHuemm\nm5gxYwY9evSgf//+6uuX4HDbp6dEtHHjxjFkyBAqusKrte47J9XtdeDcPQ++VPBNFRMTw+DBg7n+\n+ut59NFHadWqVbHnTz75ZEaMGOF9fN5551G9enX69+/PSy+9REJCQql9dujQgbp16zJhwgTuv/9+\nANavX88nn3zCBx98AMDKlSt55ZVXePvtt7n22msByMjIYOPGjTzyyCN06dKlQr+HSLnc9ukpEWvM\nmDFcd911WGuJj49n6NChfv/s1q2Qk1O8LTkZ6tULcJAVoIo+Alx99dWkpKTw1FNPlXrOWssLL7zA\nCSecQFJSEvHx8Vx11VXk5uayxlefJxAXF0fPnj2ZMGGCt+3DDz+kevXqXHzxxQBkZWURExNDjx49\nyM/P936lp6fz7bffUlBQEJxfVqKXKnoJgTfeeMOb5MHz2ffnSHt/uO0eelCijwhxcXEMGjSI9957\nj9UlPgxfeOEF7rnnHnr06MGUKVNYsmQJo0aNAuDAgQNl7rNPnz58++23rFixAvBctu/atStJSUmA\np0ugoKCAWrVqER8f7/3q168f+fn5bNy4MUi/rUQtN00eLhFp1KhR3HTTTd4kf9ppp5GdnU316tX9\n3ocbz0d16T5C9O/fn8cff5zhw4cXa//www/p1atXsT785cuXl7u/9u3b07BhQyZMmEDfvn1ZvHgx\ngwcP9j5fp04d4uLi+PTTT4mJKX2+2KBBgyr8NiI+uGnycIk4zz33HHfffbf3cdu2bZkzZw516tSp\n0H7c2MOkRB8hEhMTueeeexg8eDBt2rQhvuiWo5ycHBITE4tt+/7775e7v9jYWHr37s2ECROoVq0a\n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\nP6kZDwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 8))\n",
    "results = pd.concat(dfs)\n",
    "pivot_plot(results, fig=fig);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "all,-slideshow",
   "formats": "ipynb,Rmd"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
